
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BINDING BRACKET DIV ELSE EQUAL FUNCTION GEQ GT IF LEQ LT MAIN MINUS MUL NEQ NOT NUMBER OR PLUS POW RETURN SEMICOLON SKIP STRING VARIABLE WHILEprogram : list_of_functions mainlist_of_functions : func_init list_of_functions\n                        |main : MAIN BRACKET BRACKET BRACKET list_of_op BRACKETfunc_init : FUNCTION BRACKET list_of_args BRACKET BRACKET list_of_op BRACKETlist_of_args : VARIABLE SEMICOLON list_of_args\n                   | VARIABLE\n                   |list_of_op : operation SEMICOLON list_of_op\n                 |operation : op_skip\n               | op_if\n               | op_while\n               | op_bind\n               | op_return\n               | f_callop_skip : SKIPop_if : IF BRACKET expr BRACKET BRACKET list_of_op BRACKET ELSE BRACKET list_of_op BRACKET\n            | IF BRACKET expr BRACKET BRACKET list_of_op BRACKETop_while : WHILE BRACKET expr BRACKET BRACKET list_of_op BRACKETop_bind : VARIABLE BINDING exprop_return : RETURN exprf_call : FUNCTION BRACKET list_of_args BRACKETexpr : expr_without_or OR expr\n           | expr_without_orexpr_without_or : expr_without_and AND expr_without_or\n                       | expr_without_andexpr_without_and : NOT expr_without_not\n                        | expr_without_notexpr_without_not : expr_without_compare EQUAL expr_without_compare\n                        | expr_without_compare NEQ expr_without_compare\n                        | expr_without_compare GEQ expr_without_compare\n                        | expr_without_compare LEQ expr_without_compare\n                        | expr_without_compare GT expr_without_compare\n                        | expr_without_compare LT expr_without_compare\n                        | expr_without_compareexpr_without_compare : expr_without_compare PLUS expr_monomial\n                            | expr_without_compare MINUS expr_monomial\n                            | expr_monomialexpr_monomial : expr_monomial MUL expr_indivisible\n                     | expr_monomial DIV expr_indivisible\n                     | expr_indivisibleexpr_indivisible : BRACKET MINUS expr_positive BRACKET\n                        | expr_positiveexpr_positive : expr_unit POW expr_positive\n                     | expr_unitexpr_unit : NUMBER\n                 | STRING\n                 | VARIABLE\n                 | f_call\n                 | BRACKET expr BRACKET'
    
_lr_action_items = {'MAIN':([0,2,3,7,54,],[-3,6,-3,-2,-5,]),'FUNCTION':([0,3,15,16,30,34,35,36,37,41,46,54,59,60,62,63,64,65,66,67,68,69,70,71,72,74,90,95,96,103,],[4,4,31,31,31,31,31,31,31,31,31,-5,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'$end':([1,5,33,],[0,-1,-4,]),'BRACKET':([4,6,8,9,10,11,12,13,14,15,16,17,18,27,28,30,31,32,34,35,36,37,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,103,104,],[8,9,-8,12,13,-7,15,16,-8,-10,-10,-6,33,35,36,46,53,54,-10,46,46,46,-25,-27,46,-29,-36,-39,-42,46,-44,-46,-47,-48,-49,-50,-8,-9,76,77,46,46,-28,46,46,46,46,46,46,46,46,46,46,90,92,90,94,95,96,-24,-26,-30,-31,-32,-33,-34,-35,-37,-38,-40,-41,46,97,-51,-45,-23,-10,-10,-43,100,101,103,-10,105,]),'VARIABLE':([8,14,15,16,30,34,35,36,37,41,46,53,59,60,62,63,64,65,66,67,68,69,70,71,72,74,90,95,96,103,],[11,11,29,29,51,29,51,51,51,51,51,11,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,29,29,29,]),'SEMICOLON':([11,19,20,21,22,23,24,25,26,38,39,40,42,43,44,45,47,48,49,50,51,52,58,61,78,79,80,81,82,83,84,85,86,87,88,89,92,93,94,97,100,101,105,],[14,34,-11,-12,-13,-14,-15,-16,-17,-22,-25,-27,-29,-36,-39,-42,-44,-46,-47,-48,-49,-50,-21,-28,-24,-26,-30,-31,-32,-33,-34,-35,-37,-38,-40,-41,-51,-45,-23,-43,-19,-20,-18,]),'SKIP':([15,16,34,95,96,103,],[26,26,26,26,26,26,]),'IF':([15,16,34,95,96,103,],[27,27,27,27,27,27,]),'WHILE':([15,16,34,95,96,103,],[28,28,28,28,28,28,]),'RETURN':([15,16,34,95,96,103,],[30,30,30,30,30,30,]),'BINDING':([29,],[37,]),'NOT':([30,35,36,37,46,59,60,90,],[41,41,41,41,41,41,41,41,]),'NUMBER':([30,35,36,37,41,46,59,60,62,63,64,65,66,67,68,69,70,71,72,74,90,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'STRING':([30,35,36,37,41,46,59,60,62,63,64,65,66,67,68,69,70,71,72,74,90,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'OR':([39,40,42,43,44,45,47,48,49,50,51,52,61,79,80,81,82,83,84,85,86,87,88,89,92,93,94,97,],[59,-27,-29,-36,-39,-42,-44,-46,-47,-48,-49,-50,-28,-26,-30,-31,-32,-33,-34,-35,-37,-38,-40,-41,-51,-45,-23,-43,]),'AND':([40,42,43,44,45,47,48,49,50,51,52,61,80,81,82,83,84,85,86,87,88,89,92,93,94,97,],[60,-29,-36,-39,-42,-44,-46,-47,-48,-49,-50,-28,-30,-31,-32,-33,-34,-35,-37,-38,-40,-41,-51,-45,-23,-43,]),'EQUAL':([43,44,45,47,48,49,50,51,52,86,87,88,89,92,93,94,97,],[62,-39,-42,-44,-46,-47,-48,-49,-50,-37,-38,-40,-41,-51,-45,-23,-43,]),'NEQ':([43,44,45,47,48,49,50,51,52,86,87,88,89,92,93,94,97,],[63,-39,-42,-44,-46,-47,-48,-49,-50,-37,-38,-40,-41,-51,-45,-23,-43,]),'GEQ':([43,44,45,47,48,49,50,51,52,86,87,88,89,92,93,94,97,],[64,-39,-42,-44,-46,-47,-48,-49,-50,-37,-38,-40,-41,-51,-45,-23,-43,]),'LEQ':([43,44,45,47,48,49,50,51,52,86,87,88,89,92,93,94,97,],[65,-39,-42,-44,-46,-47,-48,-49,-50,-37,-38,-40,-41,-51,-45,-23,-43,]),'GT':([43,44,45,47,48,49,50,51,52,86,87,88,89,92,93,94,97,],[66,-39,-42,-44,-46,-47,-48,-49,-50,-37,-38,-40,-41,-51,-45,-23,-43,]),'LT':([43,44,45,47,48,49,50,51,52,86,87,88,89,92,93,94,97,],[67,-39,-42,-44,-46,-47,-48,-49,-50,-37,-38,-40,-41,-51,-45,-23,-43,]),'PLUS':([43,44,45,47,48,49,50,51,52,80,81,82,83,84,85,86,87,88,89,92,93,94,97,],[68,-39,-42,-44,-46,-47,-48,-49,-50,68,68,68,68,68,68,-37,-38,-40,-41,-51,-45,-23,-43,]),'MINUS':([43,44,45,46,47,48,49,50,51,52,80,81,82,83,84,85,86,87,88,89,92,93,94,97,],[69,-39,-42,72,-44,-46,-47,-48,-49,-50,69,69,69,69,69,69,-37,-38,-40,-41,-51,-45,-23,-43,]),'MUL':([44,45,47,48,49,50,51,52,86,87,88,89,92,93,94,97,],[70,-42,-44,-46,-47,-48,-49,-50,70,70,-40,-41,-51,-45,-23,-43,]),'DIV':([44,45,47,48,49,50,51,52,86,87,88,89,92,93,94,97,],[71,-42,-44,-46,-47,-48,-49,-50,71,71,-40,-41,-51,-45,-23,-43,]),'POW':([48,49,50,51,52,92,94,],[74,-47,-48,-49,-50,-51,-23,]),'ELSE':([100,],[102,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'list_of_functions':([0,3,],[2,7,]),'func_init':([0,3,],[3,3,]),'main':([2,],[5,]),'list_of_args':([8,14,53,],[10,17,75,]),'list_of_op':([15,16,34,95,96,103,],[18,32,55,98,99,104,]),'operation':([15,16,34,95,96,103,],[19,19,19,19,19,19,]),'op_skip':([15,16,34,95,96,103,],[20,20,20,20,20,20,]),'op_if':([15,16,34,95,96,103,],[21,21,21,21,21,21,]),'op_while':([15,16,34,95,96,103,],[22,22,22,22,22,22,]),'op_bind':([15,16,34,95,96,103,],[23,23,23,23,23,23,]),'op_return':([15,16,34,95,96,103,],[24,24,24,24,24,24,]),'f_call':([15,16,30,34,35,36,37,41,46,59,60,62,63,64,65,66,67,68,69,70,71,72,74,90,95,96,103,],[25,25,52,25,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,25,25,25,]),'expr':([30,35,36,37,46,59,90,],[38,56,57,58,73,78,73,]),'expr_without_or':([30,35,36,37,46,59,60,90,],[39,39,39,39,39,39,79,39,]),'expr_without_and':([30,35,36,37,46,59,60,90,],[40,40,40,40,40,40,40,40,]),'expr_without_not':([30,35,36,37,41,46,59,60,90,],[42,42,42,42,61,42,42,42,42,]),'expr_without_compare':([30,35,36,37,41,46,59,60,62,63,64,65,66,67,90,],[43,43,43,43,43,43,43,43,80,81,82,83,84,85,43,]),'expr_monomial':([30,35,36,37,41,46,59,60,62,63,64,65,66,67,68,69,90,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,86,87,44,]),'expr_indivisible':([30,35,36,37,41,46,59,60,62,63,64,65,66,67,68,69,70,71,90,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,88,89,45,]),'expr_positive':([30,35,36,37,41,46,59,60,62,63,64,65,66,67,68,69,70,71,72,74,90,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,91,93,47,]),'expr_unit':([30,35,36,37,41,46,59,60,62,63,64,65,66,67,68,69,70,71,72,74,90,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> list_of_functions main','program',2,'p_program','parse.py',9),
  ('list_of_functions -> func_init list_of_functions','list_of_functions',2,'p_list_of_functions','parse.py',14),
  ('list_of_functions -> <empty>','list_of_functions',0,'p_list_of_functions','parse.py',15),
  ('main -> MAIN BRACKET BRACKET BRACKET list_of_op BRACKET','main',6,'p_main','parse.py',20),
  ('func_init -> FUNCTION BRACKET list_of_args BRACKET BRACKET list_of_op BRACKET','func_init',7,'p_func_init','parse.py',25),
  ('list_of_args -> VARIABLE SEMICOLON list_of_args','list_of_args',3,'p_list_of_args','parse.py',30),
  ('list_of_args -> VARIABLE','list_of_args',1,'p_list_of_args','parse.py',31),
  ('list_of_args -> <empty>','list_of_args',0,'p_list_of_args','parse.py',32),
  ('list_of_op -> operation SEMICOLON list_of_op','list_of_op',3,'p_list_of_op','parse.py',42),
  ('list_of_op -> <empty>','list_of_op',0,'p_list_of_op','parse.py',43),
  ('operation -> op_skip','operation',1,'p_operation','parse.py',51),
  ('operation -> op_if','operation',1,'p_operation','parse.py',52),
  ('operation -> op_while','operation',1,'p_operation','parse.py',53),
  ('operation -> op_bind','operation',1,'p_operation','parse.py',54),
  ('operation -> op_return','operation',1,'p_operation','parse.py',55),
  ('operation -> f_call','operation',1,'p_operation','parse.py',56),
  ('op_skip -> SKIP','op_skip',1,'p_op_skip','parse.py',61),
  ('op_if -> IF BRACKET expr BRACKET BRACKET list_of_op BRACKET ELSE BRACKET list_of_op BRACKET','op_if',11,'p_op_if','parse.py',66),
  ('op_if -> IF BRACKET expr BRACKET BRACKET list_of_op BRACKET','op_if',7,'p_op_if','parse.py',67),
  ('op_while -> WHILE BRACKET expr BRACKET BRACKET list_of_op BRACKET','op_while',7,'p_op_while','parse.py',75),
  ('op_bind -> VARIABLE BINDING expr','op_bind',3,'p_op_bind','parse.py',80),
  ('op_return -> RETURN expr','op_return',2,'p_op_return','parse.py',85),
  ('f_call -> FUNCTION BRACKET list_of_args BRACKET','f_call',4,'p_f_call','parse.py',90),
  ('expr -> expr_without_or OR expr','expr',3,'p_expr','parse.py',95),
  ('expr -> expr_without_or','expr',1,'p_expr','parse.py',96),
  ('expr_without_or -> expr_without_and AND expr_without_or','expr_without_or',3,'p_expr_without_or','parse.py',104),
  ('expr_without_or -> expr_without_and','expr_without_or',1,'p_expr_without_or','parse.py',105),
  ('expr_without_and -> NOT expr_without_not','expr_without_and',2,'p_expr_without_and','parse.py',113),
  ('expr_without_and -> expr_without_not','expr_without_and',1,'p_expr_without_and','parse.py',114),
  ('expr_without_not -> expr_without_compare EQUAL expr_without_compare','expr_without_not',3,'p_expr_without_not','parse.py',122),
  ('expr_without_not -> expr_without_compare NEQ expr_without_compare','expr_without_not',3,'p_expr_without_not','parse.py',123),
  ('expr_without_not -> expr_without_compare GEQ expr_without_compare','expr_without_not',3,'p_expr_without_not','parse.py',124),
  ('expr_without_not -> expr_without_compare LEQ expr_without_compare','expr_without_not',3,'p_expr_without_not','parse.py',125),
  ('expr_without_not -> expr_without_compare GT expr_without_compare','expr_without_not',3,'p_expr_without_not','parse.py',126),
  ('expr_without_not -> expr_without_compare LT expr_without_compare','expr_without_not',3,'p_expr_without_not','parse.py',127),
  ('expr_without_not -> expr_without_compare','expr_without_not',1,'p_expr_without_not','parse.py',128),
  ('expr_without_compare -> expr_without_compare PLUS expr_monomial','expr_without_compare',3,'p_expr_without_compare','parse.py',146),
  ('expr_without_compare -> expr_without_compare MINUS expr_monomial','expr_without_compare',3,'p_expr_without_compare','parse.py',147),
  ('expr_without_compare -> expr_monomial','expr_without_compare',1,'p_expr_without_compare','parse.py',148),
  ('expr_monomial -> expr_monomial MUL expr_indivisible','expr_monomial',3,'p_expr_monomial','parse.py',158),
  ('expr_monomial -> expr_monomial DIV expr_indivisible','expr_monomial',3,'p_expr_monomial','parse.py',159),
  ('expr_monomial -> expr_indivisible','expr_monomial',1,'p_expr_monomial','parse.py',160),
  ('expr_indivisible -> BRACKET MINUS expr_positive BRACKET','expr_indivisible',4,'p_expr_indivisible','parse.py',164),
  ('expr_indivisible -> expr_positive','expr_indivisible',1,'p_expr_indivisible','parse.py',165),
  ('expr_positive -> expr_unit POW expr_positive','expr_positive',3,'p_expr_positive','parse.py',173),
  ('expr_positive -> expr_unit','expr_positive',1,'p_expr_positive','parse.py',174),
  ('expr_unit -> NUMBER','expr_unit',1,'p_expr_unit','parse.py',182),
  ('expr_unit -> STRING','expr_unit',1,'p_expr_unit','parse.py',183),
  ('expr_unit -> VARIABLE','expr_unit',1,'p_expr_unit','parse.py',184),
  ('expr_unit -> f_call','expr_unit',1,'p_expr_unit','parse.py',185),
  ('expr_unit -> BRACKET expr BRACKET','expr_unit',3,'p_expr_unit','parse.py',186),
]
